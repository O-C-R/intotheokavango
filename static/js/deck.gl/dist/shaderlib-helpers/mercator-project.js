"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WebMercatorProjection;
// Copyright (c) 2015 Uber Technologies, Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var PI = Math.PI;
var pow = Math.pow;
var tan = Math.tan;
var log = Math.log;
var atan = Math.atan;
var exp = Math.exp;
var DEGREES_TO_RADIANS = PI / 180;
var RADIANS_TO_DEGREES = 180 / PI;

function radians(value) {
  return value * DEGREES_TO_RADIANS;
}

function degrees(value) {
  return value * RADIANS_TO_DEGREES;
}

// see: https://en.wikipedia.org/wiki/Web_Mercator
function WebMercatorProjection(_ref) {
  var _ref$tileSize = _ref.tileSize;
  var tileSize = _ref$tileSize === undefined ? 512 : _ref$tileSize;
  var longitude = _ref.longitude;
  var latitude = _ref.latitude;
  var zoom = _ref.zoom;
  var _ref$width = _ref.width;
  var width = _ref$width === undefined ? 256 : _ref$width;
  var _ref$height = _ref.height;
  var height = _ref$height === undefined ? 256 : _ref$height;

  var scale = (tileSize || 512) * 0.5 / PI * pow(2, zoom);
  var lamda = radians(longitude);
  var phi = radians(latitude);
  var x = scale * (lamda + PI);
  var y = scale * (PI - log(tan(PI * 0.25 + phi * 0.5)));
  var offsetX = width * 0.5 - x;
  var offsetY = height * 0.5 - y;

  function project(lnglat2) {
    var lamda2 = lnglat2[0] * DEGREES_TO_RADIANS;
    var phi2 = lnglat2[1] * DEGREES_TO_RADIANS;
    var x2 = scale * (lamda2 + PI);
    var y2 = scale * (PI - log(tan(PI * 0.25 + phi2 * 0.5)));
    return [x2, y2];
  }

  function unproject(xy) {
    var x2 = xy[0];
    var y2 = xy[1];
    var lamda2 = x2 / scale - PI;
    var phi2 = 2 * (atan(exp(PI - y2 / scale)) - PI * 0.25);
    return [degrees(lamda2), degrees(phi2)];
  }

  function getViewMatrix4() {
    return [1, 0, 0, -offsetX, 0, 1, 0, -offsetY, 0, 0, 1, 0, 0, 0, 0, 1];
  }

  function projectViewport(lnglat2) {
    var lamda2 = lnglat2[0] * DEGREES_TO_RADIANS;
    var phi2 = lnglat2[1] * DEGREES_TO_RADIANS;
    var x2 = scale * (lamda2 + PI);
    var y2 = scale * (PI - log(tan(PI * 0.25 + phi2 * 0.5)));
    return [x2 + offsetX, y2 + offsetY];
  }

  function unprojectViewport(xy) {
    var x2 = xy[0] - offsetX;
    var y2 = xy[1] - offsetY;
    var lamda2 = x2 / scale - PI;
    var phi2 = 2 * (atan(exp(PI - y2 / scale)) - PI * 0.25);
    return [degrees(lamda2), degrees(phi2)];
  }

  function viewportContains(lnglat2) {
    var xy = project(lnglat2);
    var x1 = xy[0];
    var y1 = xy[1];
    return x1 >= 0 && x1 <= opts.width && y1 >= 0 && y1 <= opts.height;
  }

  return {
    project: project,
    unproject: unproject,
    getViewMatrix4: getViewMatrix4,
    projectViewport: projectViewport,
    unprojectViewport: unprojectViewport,
    viewportContains: viewportContains
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaGFkZXJsaWItaGVscGVycy9tZXJjYXRvci1wcm9qZWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXFDd0IscUI7QUFyQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBTSxLQUFLLEtBQUssRUFBaEI7QUFDQSxJQUFNLE1BQU0sS0FBSyxHQUFqQjtBQUNBLElBQU0sTUFBTSxLQUFLLEdBQWpCO0FBQ0EsSUFBTSxNQUFNLEtBQUssR0FBakI7QUFDQSxJQUFNLE9BQU8sS0FBSyxJQUFsQjtBQUNBLElBQU0sTUFBTSxLQUFLLEdBQWpCO0FBQ0EsSUFBTSxxQkFBcUIsS0FBSyxHQUFoQztBQUNBLElBQU0scUJBQXFCLE1BQU0sRUFBakM7O0FBRUEsU0FBUyxPQUFULENBQWlCLEtBQWpCLEVBQXdCO0FBQ3RCLFNBQU8sUUFBUSxrQkFBZjtBQUNEOztBQUVELFNBQVMsT0FBVCxDQUFpQixLQUFqQixFQUF3QjtBQUN0QixTQUFPLFFBQVEsa0JBQWY7QUFDRDs7QUFFRDtBQUNlLFNBQVMscUJBQVQsT0FPWjtBQUFBLDJCQU5ELFFBTUM7QUFBQSxNQU5ELFFBTUMsaUNBTlUsR0FNVjtBQUFBLE1BTEQsU0FLQyxRQUxELFNBS0M7QUFBQSxNQUpELFFBSUMsUUFKRCxRQUlDO0FBQUEsTUFIRCxJQUdDLFFBSEQsSUFHQztBQUFBLHdCQUZELEtBRUM7QUFBQSxNQUZELEtBRUMsOEJBRk8sR0FFUDtBQUFBLHlCQURELE1BQ0M7QUFBQSxNQURELE1BQ0MsK0JBRFEsR0FDUjs7QUFDRCxNQUFNLFFBQVEsQ0FBQyxZQUFZLEdBQWIsSUFBb0IsR0FBcEIsR0FBMEIsRUFBMUIsR0FBK0IsSUFBSSxDQUFKLEVBQU8sSUFBUCxDQUE3QztBQUNBLE1BQU0sUUFBUSxRQUFRLFNBQVIsQ0FBZDtBQUNBLE1BQU0sTUFBTSxRQUFRLFFB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LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE1IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG5cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbmNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IHBvdyA9IE1hdGgucG93O1xuY29uc3QgdGFuID0gTWF0aC50YW47XG5jb25zdCBsb2cgPSBNYXRoLmxvZztcbmNvbnN0IGF0YW4gPSBNYXRoLmF0YW47XG5jb25zdCBleHAgPSBNYXRoLmV4cDtcbmNvbnN0IERFR1JFRVNfVE9fUkFESUFOUyA9IFBJIC8gMTgwO1xuY29uc3QgUkFESUFOU19UT19ERUdSRUVTID0gMTgwIC8gUEk7XG5cbmZ1bmN0aW9uIHJhZGlhbnModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICogREVHUkVFU19UT19SQURJQU5TO1xufVxuXG5mdW5jdGlvbiBkZWdyZWVzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAqIFJBRElBTlNfVE9fREVHUkVFUztcbn1cblxuLy8gc2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWJfTWVyY2F0b3JcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdlYk1lcmNhdG9yUHJvamVjdGlvbih7XG4gIHRpbGVTaXplID0gNTEyLFxuICBsb25naXR1ZGUsXG4gIGxhdGl0dWRlLFxuICB6b29tLFxuICB3aWR0aCA9IDI1NixcbiAgaGVpZ2h0ID0gMjU2XG59KSB7XG4gIGNvbnN0IHNjYWxlID0gKHRpbGVTaXplIHx8IDUxMikgKiAwLjUgLyBQSSAqIHBvdygyLCB6b29tKTtcbiAgY29uc3QgbGFtZGEgPSByYWRpYW5zKGxvbmdpdHVkZSk7XG4gIGNvbnN0IHBoaSA9IHJhZGlhbnMobGF0aXR1ZGUpO1xuICBjb25zdCB4ID0gc2NhbGUgKiAobGFtZGEgKyBQSSk7XG4gIGNvbnN0IHkgPSBzY2FsZSAqIChQSSAtIGxvZyh0YW4oUEkgKiAwLjI1ICsgcGhpICogMC41KSkpO1xuICBjb25zdCBvZmZzZXRYID0gd2lkdGggKiAwLjUgLSB4O1xuICBjb25zdCBvZmZzZXRZID0gaGVpZ2h0ICogMC41IC0geTtcblxuICBmdW5jdGlvbiBwcm9qZWN0KGxuZ2xhdDIpIHtcbiAgICBjb25zdCBsYW1kYTIgPSBsbmdsYXQyWzBdICogREVHUkVFU19UT19SQURJQU5TO1xuICAgIGNvbnN0IHBoaTIgPSBsbmdsYXQyWzFdICogREVHUkVFU19UT19SQURJQU5TO1xuICAgIGNvbnN0IHgyID0gc2NhbGUgKiAobGFtZGEyICsgUEkpO1xuICAgIGNvbnN0IHkyID0gc2NhbGUgKiAoUEkgLSBsb2codGFuKFBJICogMC4yNSArIHBoaTIgKiAwLjUpKSk7XG4gICAgcmV0dXJuIFt4MiwgeTJdO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5wcm9qZWN0KHh5KSB7XG4gICAgY29uc3QgeDIgPSB4eVswXTtcbiAgICBjb25zdCB5MiA9IHh5WzFdO1xuICAgIGNvbnN0IGxhbWRhMiA9IHgyIC8gc2NhbGUgLSBQSTtcbiAgICBjb25zdCBwaGkyID0gMiAqIChhdGFuKGV4cChQSSAtIHkyIC8gc2NhbGUpKSAtIFBJICogMC4yNSk7XG4gICAgcmV0dXJuIFtkZWdyZWVzKGxhbWRhMiksIGRlZ3JlZXMocGhpMildO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Vmlld01hdHJpeDQoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIDEsIDAsIDAsIC1vZmZzZXRYLFxuICAgICAgMCwgMSwgMCwgLW9mZnNldFksXG4gICAgICAwLCAwLCAxLCAwLFxuICAgICAgMCwgMCwgMCwgMVxuICAgIF07XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0Vmlld3BvcnQobG5nbGF0Mikge1xuICAgIGNvbnN0IGxhbWRhMiA9IGxuZ2xhdDJbMF0gKiBERUdSRUVTX1RPX1JBRElBTlM7XG4gICAgY29uc3QgcGhpMiA9IGxuZ2xhdDJbMV0gKiBERUdSRUVTX1RPX1JBRElBTlM7XG4gICAgY29uc3QgeDIgPSBzY2FsZSAqIChsYW1kYTIgKyBQSSk7XG4gICAgY29uc3QgeTIgPSBzY2FsZSAqIChQSSAtIGxvZyh0YW4oUEkgKiAwLjI1ICsgcGhpMiAqIDAuNSkpKTtcbiAgICByZXR1cm4gW3gyICsgb2Zmc2V0WCwgeTIgKyBvZmZzZXRZXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVucHJvamVjdFZpZXdwb3J0KHh5KSB7XG4gICAgY29uc3QgeDIgPSB4eVswXSAtIG9mZnNldFg7XG4gICAgY29uc3QgeTIgPSB4eVsxXSAtIG9mZnNldFk7XG4gICAgY29uc3QgbGFtZGEyID0geDIgLyBzY2FsZSAtIFBJO1xuICAgIGNvbnN0IHBoaTIgPSAyICogKGF0YW4oZXhwKFBJIC0geTIgLyBzY2FsZSkpIC0gUEkgKiAwLjI1KTtcbiAgICByZXR1cm4gW2RlZ3JlZXMobGFtZGEyKSwgZGVncmVlcyhwaGkyKV07XG4gIH1cblxuICBmdW5jdGlvbiB2aWV3cG9ydENvbnRhaW5zKGxuZ2xhdDIpIHtcbiAgICBjb25zdCB4eSA9IHByb2plY3QobG5nbGF0Mik7XG4gICAgY29uc3QgeDEgPSB4eVswXTtcbiAgICBjb25zdCB5MSA9IHh5WzFdO1xuICAgIHJldHVybiAoXG4gICAgICB4MSA+PSAwICYmIHgxIDw9IG9wdHMud2lkdGggJiZcbiAgICAgIHkxID49IDAgJiYgeTEgPD0gb3B0cy5oZWlnaHRcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9qZWN0LFxuICAgIHVucHJvamVjdCxcbiAgICBnZXRWaWV3TWF0cml4NCxcbiAgICBwcm9qZWN0Vmlld3BvcnQsXG4gICAgdW5wcm9qZWN0Vmlld3BvcnQsXG4gICAgdmlld3BvcnRDb250YWluc1xuICB9O1xufVxuIl19